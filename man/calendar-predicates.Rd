% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dates.R
\name{calendar-predicates}
\alias{calendar-predicates}
\alias{cal_is_weekend}
\alias{cal_is_business_day}
\alias{cal_is_holiday}
\alias{cal_is_end_of_month}
\title{Calendar predicates}
\usage{
cal_is_weekend(x, cal = calendar())

cal_is_business_day(x, cal = calendar())

cal_is_holiday(x, cal = calendar())

cal_is_end_of_month(x, cal = calendar())
}
\arguments{
\item{x}{\code{[Date]}

A vector of dates to check.}

\item{cal}{\code{[calendar]}

A calendar.}
}
\value{
A logical vector the same size as \code{x}.
}
\description{
\itemize{
\item \code{cal_is_weekend()} checks if \code{x} is a weekend.
\item \code{cal_is_business_day()} checks if \code{x} is a business day (i.e., not a
weekend and not a holiday).
\item \code{cal_is_holiday()} checks if \code{x} is a business holiday (but not a weekend).
\item \code{cal_is_end_of_month()} checks if \code{x} is the last business day of
the month.
}
}
\examples{
# Not a weekend
cal_is_weekend("2019-01-01")

# But it is a business holiday!
cal_is_holiday("2019-01-01")

# This is a weekend
cal_is_weekend("2019-01-05")

# Neither are business days
cal_is_business_day(c("2019-01-01", "2019-01-05"))

# You can remove all holidays and weekends with an empty calendar,
# which is then respected by `cal_is_holiday()` and `cal_is_weekend()`
cal_no_weekends_no_holidays <- empty_calendar(weekends = character())
cal_is_holiday("2019-01-01", cal_no_weekends_no_holidays)
cal_is_weekend("2019-01-05", cal_no_weekends_no_holidays)

# The "end of the month" is relative to the business calendar, meaning
# that it is the last business day of the month, not the last day of the
# month
cal_is_weekend(c("2019-03-29", "2019-03-30", "2019-03-31"))
cal_is_end_of_month(c("2019-03-29", "2019-03-30", "2019-03-31"))

}
